@inject HttpClient Http
@page "/gibuserlist"

<h3>GibUserList</h3>


<Grid TItem="Employee1" class="table table-hover table-bordered table-striped" DataProvider="EmployeesDataProvider" AllowFiltering="true" AllowPaging="true" PageSize="5" AllowSorting="true" Responsive="true">
  <GridColumn TItem="Employee1" HeaderText="Id" PropertyName="Id" SortKeySelector="item => item.Id">
    @context.Id
  </GridColumn>
  <GridColumn TItem="Employee1" HeaderText="Employee Name" PropertyName="Name" SortKeySelector="item => item.Name">
    @context.Name
  </GridColumn>
  <GridColumn TItem="Employee1" HeaderText="Designation" PropertyName="Designation" SortKeySelector="item => item.Designation">
    @context.Designation
  </GridColumn>
  <GridColumn TItem="Employee1" HeaderText="DOJ" PropertyName="DOJ" SortKeySelector="item => item.DOJ">
    @context.DOJ
  </GridColumn>
  <GridColumn TItem="Employee1" HeaderText="Active" PropertyName="IsActive" SortKeySelector="item => item.IsActive">
    @context.IsActive
  </GridColumn>
</Grid>   

@code {
  protected override Task OnInitializedAsync()
  {
    LoadList();
    return base.OnInitializedAsync();

  }
  private async Task<string> LoadList()
  {
    try
    {
      // using (HttpClient client = new HttpClient())
      // {
      //   HttpResponseMessage response = await client.GetAsync("https://localhost:7039/api/GibUserList?PageNumber=1&Limit=1000");
      //   response.EnsureSuccessStatusCode();
      //   string responseBody = await response.Content.ReadAsStringAsync();
      //   return responseBody;
      // } test   dfshxxx
      using (HttpClient client = new HttpClient())
      {
        Console.WriteLine(Http.BaseAddress);
        var response = await client.GetFromJsonAsync<PaginationDataResult<IEnumerable<GibUserListDto>>>("api/GibUserList?PageNumber=1&Limit=1000");
        return "";
      }
    }
    catch (Exception ex)
    {

      throw;
    }


    //var response = await client.GetFromJsonAsync<>("");

  }

  class Employee1
  {
    public int Id { get; set; }
    public string Name { get; set; }
    public string Designation { get; set; }
    public DateOnly DOJ { get; set; }
    public bool IsActive { get; set; }
  }
  private IEnumerable<Employee1> employees;

  protected override void OnInitialized()
  {
    employees = new List<Employee1>
        {
            new Employee1 { Id = 107, Name = "Alice", Designation = "AI Engineer", DOJ = new DateOnly(1998, 11, 17), IsActive = true },
            new Employee1 { Id = 103, Name = "Bob", Designation = "Senior DevOps Engineer", DOJ = new DateOnly(1985, 1, 5), IsActive = true },
            new Employee1 { Id = 106, Name = "John", Designation = "Data Engineer", DOJ = new DateOnly(1995, 4, 17), IsActive = true },
            new Employee1 { Id = 104, Name = "Pop", Designation = "Associate Architect", DOJ = new DateOnly(1985, 6, 8), IsActive = false },
            new Employee1 { Id = 105, Name = "Ronald", Designation = "Senior Data Engineer", DOJ = new DateOnly(1991, 8, 23), IsActive = true },
            new Employee1 { Id = 102, Name = "Line", Designation = "Architect", DOJ = new DateOnly(1977, 1, 12), IsActive = true },
            new Employee1 { Id = 101, Name = "Daniel", Designation = "Architect", DOJ = new DateOnly(1977, 1, 12), IsActive = true },
            new Employee1 { Id = 113, Name = "Merlin", Designation = "Senior Consultant", DOJ = new DateOnly(1989, 10, 2), IsActive = true },
            new Employee1 { Id = 117, Name = "Sharna", Designation = "Data Analyst", DOJ = new DateOnly(1994, 5, 12), IsActive = true },
            new Employee1 { Id = 108, Name = "Zayne", Designation = "Data Analyst", DOJ = new DateOnly(1991, 1, 1), IsActive = true },
            new Employee1 { Id = 109, Name = "Isha", Designation = "App Maker", DOJ = new DateOnly(1996, 7, 1), IsActive = true },
            new Employee1 { Id = 111, Name = "Glenda", Designation = "Data Engineer", DOJ = new DateOnly(1994, 1, 12), IsActive = true },
        };
  }

  private async Task<GridDataProviderResult<Employee1>> EmployeesDataProvider(GridDataProviderRequest<Employee1> request)
  {
    return await Task.FromResult(request.ApplyTo(employees));
  }
}





